/******************************************************************************
* Parsers.hpp
*	Defines parsers that can be autogenerated by the `GENERATE_REGEX_PARSER`
*	macro.
*
******************************************************************************/
#pragma once

#include <cstdint>
#include <numeric>

#include "Constants.hpp"
#include "ConstantToken.hpp"
#include "Fences.hpp"
#include "Operators.hpp"
#include "RegexParser.hpp"

// Basic Arithmetic Operators
GENERATE_REGEX_PARSER(Addition, R"(^\s*\+)", 1, AdditionOperator)
GENERATE_REGEX_PARSER(Subtraction, R"(^\s*-(?: ))", 1, SubtractionOperator)
GENERATE_REGEX_PARSER(Multiplication, R"(^\s*\*)", 2, MultiplicationOperator)
GENERATE_REGEX_PARSER(Division, R"(^\s*/)", 2, DivisionOperator)
// Special Functions
GENERATE_REGEX_PARSER(Sine, R"(^[\s]*(?:sin))", 3, SineOperator)
GENERATE_REGEX_PARSER(Cosine, R"(^[\s]*(?:cos))", 3, CosineOperator)
GENERATE_REGEX_PARSER(Tangent, R"(^[\s]*(?:tan))", 3, TangentOperator)
GENERATE_REGEX_PARSER(Log, R"(^[\s]*(?:log))", 3, LogOperator)
GENERATE_REGEX_PARSER(Ln, R"(^[\s]*(?:ln))", 3, LnOperator)
// Constants
GENERATE_REGEX_PARSER(Constant, R"(^[\s]*-?\d+(?:\.\d+)?)", 0, ConstantToken)
GENERATE_REGEX_PARSER(Pi, R"(^[\s]*(?:pi))", 0, PiConstant)
GENERATE_REGEX_PARSER(E, R"(^[\s]*(?:e))", 0, EConstant)
// Fences
GENERATE_REGEX_PARSER(LeftParenthesis, R"(^[\s]*\()",
	std::numeric_limits<int32_t>::max(), ParenthesisFence)
GENERATE_REGEX_PARSER(RightParenthesis, R"(^[\s]*\))",
	std::numeric_limits<int32_t>::max(), ParenthesisPopFence)
GENERATE_REGEX_PARSER(LeftCurlyBrace, R"(^[\s]*\{)",
	std::numeric_limits<int32_t>::max(), CurlyBraceFence)
GENERATE_REGEX_PARSER(RightCurlyBrace, R"(^[\s]*\})",
	std::numeric_limits<int32_t>::max(), CurlyBracePopFence)